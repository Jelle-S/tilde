#!/usr/bin/env bash

#
# Bash functions
# self-written, copied, adapted...
# If not written myself, I probably took/stole/adapted it from
# Gary Bernhardt, Jan Moesen, Dave Lens, or some other dude(tte) on the web.
#


#
# Shared variables
# Keep these to a minimum!
#

# Where are projects checked out?
# No trailing slash!
DIR_PROJECTS=~/Projects


#
# cd to the directory the Finder is in.
# By @sindresorhus taken from:
# https://github.com/paulirish/dotfiles/commit/e67d1bc03
#
cdf() {
    cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}


#
# Attach to an existing tmux session, create the session if it doesn't exist.
#
dev() {
    local project=$1
    local switch=""

    if [[ "$project" == "" ]]
    then
        echo "usage: dev <project>"
        return 1
    fi

    # Depending on whether or not we are already in a tmux session (this is why
    # we check for $TMUX before it is created later on), we need to switch to
    # that session differently.
    if [[ "$TMUX" == "" ]]; then
        switch='tmux attach -t'
    else
        switch='tmux switch-client -t'
    fi

    tmux has-session -t $project > /dev/null 2>&1
    if [ $? != 0 ]; then
        TMUX= tmux_create_dev_session $project
    fi

    $switch $project
}


#
# Create a new tmux session for developing.
#
tmux_create_dev_session() {
    local project=$1

    if [ ! -d $DIR_PROJECTS/$project ]; then
        echo "$project not found, exiting (TODO: offer to create it?)"
        return 1
    fi

    path=$DIR_PROJECTS/$project
    pushd `pwd`

    # Start relative from the project path; we don't have to send 'cd $path' to
    # the tmux sessions.
    cd $path

    tmux new-session -s $project -d
    tmux new-window -n console -t $project

    # TODO Make cross-language (by find...[php|py|rb|pl|...]?)
    tmux send-keys -t "$project:console" "clear && php -a" C-m

    tmux select-window -t "$project:1"
    popd
}


#
# Upload a screenshot to imgur "on the fly":
# Let user select region, take screenshot
# Upload screenshot to imgur.com
# Print resulting url to image.
#
# @see http://api.imgur.com/examples
#
imgur() {
    # API Key provided by Alan@imgur.com
    local api_key="b3625162d3418ac51a9ee805b1840452"
    local url_api_upload="http://api.imgur.com/2/upload.xml"

    local fn_image="/tmp/screenshot-`date +%Y-%m-%d-%H-%M-%S`.png"
    screencapture -ix $fn_image
    local response=`curl -s -F "image=@$fn_image" -F "key=$api_key" $url_api_upload`
    echo $response | tail -1 | sed -E 's/.*<original>(.*)<\/original>.*/\1/'
}


#
# Create an SSH config host entry and add my public key to that host.
#
# @param The identifier to use for this SSH host configuration.
# @param The host name.
# @param The username for that host.
#
ssh_configure_host() {
    local identifier=$1
    local hostname=$2
    local username=$3

    if [[ "$identifier" == "" ]] || [[ "$username" == "" ]] || [[ "$hostname" == "" ]]
    then
        echo "usage: ssh_configure_host <identifier> <hostname> <username>"
    else
        echo -e "Host $identifier\n\tHostName $hostname\n\tUser $username\n\tIdentityFile ~/.ssh/id_rsa\n\tForwardAgent yes" >> ~/.ssh/config
        ssh $identifier 'mkdir -p .ssh && cat >> ~/.ssh/authorized_keys' < ~/.ssh/id_rsa.pub
        # TODO Use ssh_test_key()?
        tput bold; ssh -o PasswordAuthentication=no $identifier true && { tput setaf 2; echo 'Success!'; } || { tput setaf 1; echo 'Failure'; }; tput sgr0
        ssh_load_autocomplete
    fi
}


#
# adds ~/.ssh/config to the ssh autocomplete
# Call whenever ssh host config changes (@see ssh_configure_host)
#
ssh_load_autocomplete() {
    complete -W "$(awk '/^\s*Host\s+/ { sub(/^\s*Host /, ""); print; }' ~/.ssh/config)" ssh uli ssh_drush ssh_exec ssh_get_user
}

#
# Find the ssh user for an ssh identifier (parsed from ~/.ssh/config)
#
ssh_get_user() {
    local sshidentifier=$1
    local hostregex=$(echo "$sshidentifier" | sed -E 's/\./\\\./')

    echo $(sed -nE '/^\s*Host\s+'"$hostregex"'/,/^\s*User/p' ~/.ssh/config | grep User | sed -E 's/^\s*User\s+//')
}

#
# Test a giveh ssh_config host identifier.
#
ssh_test_key() {
    local identifier=$1
    ssh -o PasswordAuthentication=no $identifier true && { tput setaf 2; echo 'Success!'; } || { tput setaf 1; echo 'Failure'; }; tput sgr0
}


#
# Put Tim Pope's sensible vimrc on a ssh-identified server.
#
ssh_install_default_vimrc() {
    local identifier=$1
    if [[ "$identifier" == "" ]]
    then
        echo "usage: ssh_install_default_vimrc <identifier>"
    else
        ssh $identifier 'curl https://raw.githubusercontent.com/tpope/vim-sensible/master/plugin/sensible.vim > ~/.vimrc'
    fi
}


#
# Change to a project directory quickly, using FZF.
#
prj() {
    local project=$(ls $DIR_PROJECTS | fzf)
    if [[ "$project" != "" ]]
    then
        cd "$DIR_PROJECTS/$project"
    fi
}

#
# Execute a drush command on a server via ssh
#
# @param The SSH identifier (as exported by domainator).
# @param The Drush command to execute on the server.
#
ssh_drush() {
    local sshidentifier=$1
    local drushcmd=$2

    ssh_exec "$sshidentifier" "drush $drushcmd"
}

#
# Execute a command on a server, in a folder
#
# @param The SSH identifier (as exported by domainator).
# @param The command to execute.
# @param The folder to execute it in (defaults to apps/$sshuser/current).
#
ssh_exec() {
    local sshidentifier=$1
    local cmd=$2
    local appname=$(echo "$sshidentifier" | sed -E 's/\.(test|dv|qa|prod)//' | sed -E 's/([^a-z0-9])//g')
    local workingdir
    local defaultdir="~/apps/${appname:0:14}/current"

    if [ -z "$3" ]
    then
        workingdir=$defaultdir
    else
        workingdir=$3
    fi

    ssh "$sshidentifier" 'cd '"$workingdir"' && '"$cmd"''
}

#
# Shortcut for executing a `drush uli` on a server.
# uses ssh_drush() and pipes the output to the clipboard so it can be pasted
# directly in the location bar, or a secure chat, etc...
#
# @param The SSH identifier (as exported by Domainator).
#
uli() {
    local sshidentifier=$1

    ssh_drush "$sshidentifier" uli | sed -e 's/http:\/\/default//' | tr -d '\n' | xclip -selection clipboard
}
